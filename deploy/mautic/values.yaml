# Default values for mautic.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: mautic/mautic
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "5-apache"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Mautic specific configurations
mautic:
  # Define environment variables for Mautic
  # Based on https://github.com/mautic/docker-mautic/blob/mautic5/examples/basic/.mautic_env
  # See https://docs.mautic.org/en/setup/configuration for available options
  env:
    MAUTIC_SITE_URL: "http://chart-example.local" # Change this to your actual Mautic URL via Ingress or Service
    MAUTIC_RUN_CRON_JOBS: "true" # Run cron jobs within the container (consider external cron jobs for production)
    MAUTIC_TRUSTED_PROXIES: "[\\"0.0.0.0/0\\"]" # Adjust if behind specific proxies/load balancers

    # Mailer Configuration (Example using SMTP - adjust as needed)
    MAUTIC_MAILER_TRANSPORT: "smtp"
    MAUTIC_MAILER_HOST: "your-smtp-host" # e.g., smtp.gmail.com or a local mail relay service like mailhog/postfix
    MAUTIC_MAILER_PORT: "587" # Common ports: 587 (TLS), 465 (SSL), 25 (unencrypted)
    MAUTIC_MAILER_USER: "your-smtp-user" # Optional, if authentication is needed. Set to "" or remove if no auth
    # MAUTIC_MAILER_PASSWORD will be sourced from the secret
    MAUTIC_MAILER_ENCRYPTION: "tls" # 'tls', 'ssl', or null
    MAUTIC_MAILER_AUTH_MODE: "login" # 'login', 'plain', 'cram-md5', or null. Set to null if no auth
    MAUTIC_MAILER_FROM_NAME: "Your Company Name" # Default sender name
    MAUTIC_MAILER_FROM_EMAIL: "noreply@yourdomain.com" # Default sender email

    # Add other Mautic environment variables as needed
    # MAUTIC_DB_TABLE_PREFIX: "mautic_" # Default is fine unless changing

  # --- Database and Mailer sections no longer need existingSecret ---
  # The deployment template will need to be updated to reference the secret
  # defined in the 'secrets' section below when secrets.create is true.
  database:
    host: "mysql-host" # Replace with your MySQL/MariaDB service name or IP
    port: "3306"
    name: "mautic_db" # Replace with your database name
    user: "mautic_user" # Replace with your database user
    # Password should be stored in a Kubernetes secret
    # existingSecret: "mautic-credentials" # Name of the K8s secret containing DB and Mailer passwords - REMOVED
    passwordSecretKey: "db-password" # Key name within the managed secret

  # Mailer password (optional, if MAUTIC_MAILER_USER is set)
  mailer: # Only needed if mailer requires password auth
    # Password should be stored in the same Kubernetes secret as the DB password
    # existingSecret: "mautic-credentials" # Name of the K8s secret - REMOVED
    passwordSecretKey: "mailer-password" # Key name within the managed secret

  # Persistence configuration
  persistence:
    enabled: true
    # storageClassName: "standard" # Optional: specify StorageClass
    accessModes:
      - ReadWriteOnce
    size: 10Gi # Adjust size as needed (increased default)
    mountPath: "/var/www/html" # Mautic data directory inside the container
    # subPath: "" # Optional: specify a subpath within the volume

# Secret Management Configuration
secrets:
  create: true # Set to true to let Helm create the secret
  # Name of the secret to be created by Helm or the name of the existing secret if create=false
  # The default uses the Helm helper 'mautic.fullname' which usually resolves to 'release-name-chart-name'
  name: "{{ include \"mautic.fullname\" . }}-credentials" # Default name, adjust if needed

  # Values for the secret (only used if create=true)
  # !! IMPORTANT: Store actual sensitive values securely, e.g., using Helm secrets backend (like SOPS) or by passing via --set during install !!
  # These are placeholders:
  databasePassword: "YOUR_DB_PASSWORD_PLACEHOLDER"
  mailerPassword: "YOUR_MAILER_PASSWORD_PLACEHOLDER" # Set to "" if not needed
